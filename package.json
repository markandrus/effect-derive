{
  "name": "@markandrus/effect-derive",
  "version": "0.1.2",
  "description": "Derive Covariant (Functor) instances and base functors for algebraic data types (ADTs)",
  "type": "module",
  "main": "lib/index.js",
  "exports": {
    "import": "lib/index.js",
    "module-sync": "lib/index.js",
    "types": "lib/index.d.ts"
  },
  "bin": {
    "effect-derive": "bin/effect-derive.js"
  },
  "scripts": {
    "build": "rm -rf lib && tsc",
    "generate:ListF": "tsx src/index.ts BaseFunctor --for-type List --discriminator type --in-file src/examples/List.d.ts --out-file src/examples/ListF.ts",
    "generate:listCovariant": "tsx src/index.ts Covariant --for-type List --discriminator type --in-file src/examples/List.d.ts --out-file src/examples/listCovariant.ts",
    "generate:listFoldable": "tsx src/index.ts Foldable --for-type List --discriminator type --in-file src/examples/List.d.ts --out-file src/examples/listFoldable.ts",
    "generate:maybeCovariant": "tsx src/index.ts Covariant --for-type Maybe --discriminator type --in-file src/examples/Maybe.d.ts --out-file src/examples/maybeCovariant.ts",
    "generate:maybeFoldable": "tsx src/index.ts Foldable --for-type Maybe --discriminator type --in-file src/examples/Maybe.d.ts --out-file src/examples/maybeFoldable.ts",
    "generate:nonEmptyListCovariant": "tsx src/index.ts Covariant --for-type NonEmptyList --in-file src/examples/NonEmptyList.d.ts --out-file src/examples/nonEmptyListCovariant.ts --covariant './src/examples/maybeCovariant#maybeCovariant#Maybe<_>'",
    "generate:nonEmptyListFoldable": "tsx src/index.ts Foldable --for-type NonEmptyList --in-file src/examples/NonEmptyList.d.ts --out-file src/examples/nonEmptyListFoldable.ts --foldable './src/examples/maybeFoldable#maybeFoldable#Maybe<_>'",
    "generate:PeanoF": "tsx src/index.ts BaseFunctor --for-type Peano --discriminator type --in-file src/examples/Peano.d.ts --out-file src/examples/PeanoF.ts",
    "generate:roseTreeCovariant": "tsx src/index.ts Covariant --for-type RoseTree --in-file src/examples/RoseTree.d.ts --out-file src/examples/roseTreeCovariant.ts --covariant '@effect/typeclass/data/Array#Covariant#ReadonlyArray<_>'",
    "generate:roseTreeFoldable": "tsx src/index.ts Foldable --for-type RoseTree --in-file src/examples/RoseTree.d.ts --out-file src/examples/roseTreeFoldable.ts --foldable '@effect/typeclass/data/Array#Foldable#ReadonlyArray<_>'",
    "prepublish": "rm -rf lib && tsc",
    "test": "tsx test/index.ts"
  },
  "keywords": [
    "effect",
    "deriving",
    "functor",
    "covariant",
    "recursion-schemes"
  ],
  "author": "Mark Roberts <markandrusroberts@gmail.com>",
  "license": "BSD-3-Clause",
  "dependencies": {
    "@effect/typeclass": "^0.29.15",
    "effect": "^3.10.15",
    "ts-morph": "^24.0.0"
  },
  "devDependencies": {
    "@tsconfig/node22": "^22.0.0",
    "@types/node": "^22.9.0",
    "tsx": "^4.19.2",
    "typescript": "^5.6.3"
  }
}
